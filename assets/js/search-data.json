{
  
    
        "post0": {
            "title": "QUICK GUIDE ON WEB SCRAPING FROM PARSING STATIC WEB PAGE TO ACCESSING BROWSER REQUESTS",
            "content": "INTRODUCTION . One of Data Scientist tasks apart from building models is to source for data. Web scraping is one of the ways to get relevant data to improve the performance of ones model. This Blog post would show you how to parse html elements to retrieve information of interest from static and dynamic website using Selenium and Request-html Python libraries. It also contain details on how to extract data from XHR object over the browser network. . Installation of Required Dependencies . !pip install requests-html &amp;&gt; /dev/null !pip install selenium &amp;&gt; /dev/null !pip install selenium-wire &amp;&gt; /dev/null . !apt-get update &amp;&gt; /dev/null # to update ubuntu to correctly run apt install !apt install chromium-chromedriver &amp;&gt; /dev/null !cp /usr/lib/chromium-browser/chromedriver /usr/bin . cp: &#39;/usr/lib/chromium-browser/chromedriver&#39; and &#39;/usr/bin/chromedriver&#39; are the same file . import sys sys.path.insert(0,&#39;/usr/lib/chromium-browser/chromedriver&#39;) . from seleniumwire import webdriver from selenium.webdriver.chrome.options import Options from selenium.webdriver.common.by import By from selenium.webdriver.support.ui import WebDriverWait from selenium.webdriver.support import expected_conditions as EC from selenium.webdriver.common.desired_capabilities import DesiredCapabilities import json from requests_html import HTML, HTMLSession import time import re import pandas as pd import requests from datetime import datetime . /usr/local/lib/python3.7/dist-packages/trio/_core/_multierror.py:464: RuntimeWarning: IPython detected, but you already have a custom exception handler installed. I&#39;ll skip installing Trio&#39;s custom handler, but this means MultiErrors will not show full tracebacks. category=RuntimeWarning, /usr/local/lib/python3.7/dist-packages/requests/__init__.py:91: RequestsDependencyWarning: urllib3 (1.26.9) or chardet (3.0.4) doesn&#39;t match a supported version! RequestsDependencyWarning) . PARSING STATIC WEBSITE . A simple request to a website returns a HTML file which can be turned to an HTML object. . req = requests.get(&#39;https://ng.investing.com/equities/nigeria&#39;) print(f&#39;Content of a typical get request to a webpage: {req.headers[&quot;Content-Type&quot;]}&#39;) #convert to HTML Object for easy Parsing html = HTML(html = req.content) print(&#39; nHTML OBJECT: &#39;, html) . Content of a typical get request to a webpage: text/html; charset=UTF-8 HTML OBJECT: &lt;HTML url=&#39;https://example.org/&#39;&gt; . Let&#39;s extract the data in the table on this website . To do this task a basic understanding of HTML element is required. You&#39;ll need to utilize Chrome dev tool to inspect the webpage. Place your cursor on the body of the table and then right-click on your mouse. On the menu, click inspect. Chrome dev tool would display on the screen, locate the HTML tag &lt;table&gt; id = &quot;cross_rate_markets_stocks_1&quot;....&lt;/table&gt; . See accompanying image . . Our data of interest is within the table element. Under the table element are child elements such as &lt;thead&gt; and &lt;tbody&gt;. We are going to utilize the html.find() method to select the html tag bearing the information we need. This method requires the name of the element as argument. To locate the specific element of interest we can either use CSS Selectors or by XPath?redirectedfrom=MSDN) . table = html.find(&#39;#cross_rate_markets_stocks_1&#39;, first = True) #Extract header and body elements from table #first = True: ensures an element is returned instead of a list of the element header = table.find(&#39;thead&#39;, first = True) body = table.find(&#39;tbody&#39;, first = True) . column_names = header.find(&#39;tr th&#39;) column_names = [col.text for col in column_names] print(column_names) . [&#39;&#39;, &#39;Name&#39;, &#39;Last&#39;, &#39;High&#39;, &#39;Low&#39;, &#39;Chg.&#39;, &#39;Chg. %&#39;, &#39;Vol.&#39;, &#39;Time&#39;, &#39;&#39;] . column_names.pop(0) column_names.pop() . &#39;&#39; . rows = body.find(&#39;tr&#39;) rows[:3] . [&lt;Element &#39;tr&#39; id=&#39;pair_101668&#39;&gt;, &lt;Element &#39;tr&#39; id=&#39;pair_101672&#39;&gt;, &lt;Element &#39;tr&#39; id=&#39;pair_101674&#39;&gt;] . To visualize the structure of one of the rows. let&#39;s import Beautifulsoup to use its pretty print method. . !pip install beautifulsoup4 &amp;&gt; /dev/null . from bs4 import BeautifulSoup . print(BeautifulSoup(rows[0].html, &#39;html.parser&#39;).prettify()) . &lt;tr id=&#34;pair_101668&#34;&gt; &lt;td class=&#34;flag&#34;&gt; &lt;span class=&#34;ceFlags Nigeria&#34; title=&#34;Nigeria&#34;&gt; &lt;/span&gt; &lt;/td&gt; &lt;td class=&#34;bold left noWrap elp plusIconTd&#34;&gt; &lt;a href=&#34;/equities/custodying&#34; title=&#34;Custodian and Allied PLC&#34;&gt; Custodian Allied &lt;/a&gt; &lt;span class=&#34;alertBellGrayPlus js-plus-icon genToolTip oneliner&#34; data-id=&#34;101668&#34; data-name=&#34;Custodian and Allied PLC&#34; data-tooltip=&#34;Create Alert&#34; data-volume=&#34;2,162,393&#34;&gt; &lt;/span&gt; &lt;/td&gt; &lt;td class=&#34;pid-101668-last&#34;&gt; 6.95 &lt;/td&gt; &lt;td class=&#34;pid-101668-high&#34;&gt; 6.95 &lt;/td&gt; &lt;td class=&#34;pid-101668-low&#34;&gt; 6.95 &lt;/td&gt; &lt;td class=&#34;bold redFont pid-101668-pc&#34;&gt; 0.00 &lt;/td&gt; &lt;td class=&#34;bold redFont pid-101668-pcp&#34;&gt; 0.00% &lt;/td&gt; &lt;td class=&#34; pid-101668-turnover&#34;&gt; 0 &lt;/td&gt; &lt;td class=&#34; pid-101668-time&#34; data-value=&#34;1651238340&#34;&gt; 29/04 &lt;/td&gt; &lt;td class=&#34;icon&#34;&gt; &lt;span class=&#34;redClockIcon isOpenExch-96&#34;&gt; &lt;/span&gt; &lt;/td&gt; &lt;/tr&gt; . . We are interested in the text within each &lt;td&gt; element except the first and last elements. However, the second element has an anchor tag &lt;a&gt; which bears the name of the equity and the penultimate element stores the unix timestamp at the &quot;data-value&quot; attribute. Let&#39;s write a function that extracts the required text while taking these constraints into consideration. . def extract_text(row): td = row.find(&#39;td&#39;)[1:-1] #extracts all td element except the first and the last data = list() for key, value in enumerate(td): if key == 0: data.append(value.find(&#39;a&#39;, first = True).text) elif key == 7: data.append(value.attrs[&#39;data-value&#39;]) else: data.append(value.text) return data . Now, we extract all the rquired data from the body of the table by mapping the iterable rows to the function object extract_text defined above. Subsequently, we convert it to a pandas dataframe. . data = list(map(extract_text, rows)) data[: 3] . [[&#39;Custodian Allied&#39;, &#39;6.95&#39;, &#39;6.95&#39;, &#39;6.95&#39;, &#39;0.00&#39;, &#39;0.00%&#39;, &#39;0&#39;, &#39;1651238340&#39;], [&#39;Dangote Cement&#39;, &#39;285.00&#39;, &#39;292.40&#39;, &#39;292.40&#39;, &#39;+0.00&#39;, &#39;+0.00%&#39;, &#39;0&#39;, &#39;1651239000&#39;], [&#39;Dangote Sugar&#39;, &#39;16.20&#39;, &#39;16.50&#39;, &#39;16.05&#39;, &#39;0.00&#39;, &#39;0.00%&#39;, &#39;0&#39;, &#39;1651239000&#39;]] . . df = pd.DataFrame(data = data, columns = column_names) df.set_index(&#39;Name&#39;, inplace = True) df.head() . Last High Low Chg. Chg. % Vol. Time . Name . Custodian Allied 6.95 | 6.95 | 6.95 | 0.00 | 0.00% | 0 | 1651238340 | . Dangote Cement 285.00 | 292.40 | 292.40 | +0.00 | +0.00% | 0 | 1651239000 | . Dangote Sugar 16.20 | 16.50 | 16.05 | 0.00 | 0.00% | 0 | 1651239000 | . ETI 12.00 | 12.00 | 12.00 | 0.00 | 0.00% | 0 | 1651235820 | . FBN Holdings 11.95 | 12.00 | 11.85 | +0.00 | +0.00% | 0 | 1651239000 | . &lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; height=&quot;24px&quot;viewBox=&quot;0 0 24 24&quot; width=&quot;24px&quot;&gt; &lt;/svg&gt; df[&#39;Time&#39;] = df[&#39;Time&#39;].apply(lambda x: int(x)) df[&#39;Time&#39;] = df[&#39;Time&#39;].apply(lambda x: pd.to_datetime(datetime.fromtimestamp(x).date())) . df.head() . Last High Low Chg. Chg. % Vol. Time . Name . Custodian Allied 6.95 | 6.95 | 6.95 | 0.00 | 0.00% | 0 | 2022-04-29 | . Dangote Cement 285.00 | 292.40 | 292.40 | +0.00 | +0.00% | 0 | 2022-04-29 | . Dangote Sugar 16.20 | 16.50 | 16.05 | 0.00 | 0.00% | 0 | 2022-04-29 | . ETI 12.00 | 12.00 | 12.00 | 0.00 | 0.00% | 0 | 2022-04-29 | . FBN Holdings 11.95 | 12.00 | 11.85 | +0.00 | +0.00% | 0 | 2022-04-29 | . &lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; height=&quot;24px&quot;viewBox=&quot;0 0 24 24&quot; width=&quot;24px&quot;&gt; &lt;/svg&gt; PARSING A DYNAMIC WEBSITE . ng.investing.com is a dynamically rendered site. This means certain information/data are not loaded on initial page load until the user interacts with certain elements on the web page. The content of the site is controlled by javascript on the client side.Our initial requests.get() method would only provide us html content of initial page load. Meanwhile, we might be interested in some information that is only accessible after certain clicks on the web page. While the earlier packages (requests, Request-html, Beautifulsoup) are quite effective in retrieving information on Static webpages, they are limited to this kind of website design. To scrape data from a Dynamic webpage, there is a need for a web crawler that can interacts with html elements just like a regular User would. Selenium is a python package specifically built for automatic website testing. This package allow Quality Assuarance professionals to simulate User behaviour to evaluate the performance of a website and to identify any inefficiencies. Selenium&#39;s capabilities can be exploited to extract data concealed by Javascript. . The default table on the landing page of this url ng.investing.com is the NSE 30 which contains the equity price of top 30 companies listed on Nigeria Stock Exchange. Let&#39;s say we are interested in all the stocks listed on the Exchange. To have the web page display this information, we need to toggle on the dropdown to select the right option. To perform this task, we need Selenium. Checkout this page on how to use Selenium webdriver on Colab (Chrome instance) or this notebook for firefox gecko. But, you have all you need to replicate this on your project. To run selenium on your local Jupyter notebook. pip install selenium or better still pip install selenium-wire for extra bindings which would be discussed later in this notebook. Download a Chrome driver same as the version of your Chrome Browser. Ensure the executable file is in the same directory as your notebook. Let&#39;s start by defining the parameters for the Chrome webdriver. The first step is to instantiate driver object. To load the webpage of interest, the url is passed as argument to the driver.get() method. To load all the available stock prices on the webpage, the find_element method of the driver is called to loacate this element &lt;option id=&quot;all&quot;&gt;Nigeria all stocks&lt;/option&gt;. This element is located by id. After clicking on the element, the program is slept for 3 seconds to enable the query to load. The html file is saved as page by calling the driver.page_source attribute. . capabilities = DesiredCapabilities.CHROME options = webdriver.ChromeOptions() options.add_experimental_option(&#39;excludeSwitches&#39;, [&#39;enable-logging&#39;]) options = webdriver.ChromeOptions() options.add_argument(&#39;--headless&#39;) options.add_argument(&#39;--no-sandbox&#39;) options.add_argument(&#39;--disable-dev-shm-usage&#39;) . driver = webdriver.Chrome(&#39;chromedriver&#39;, options = options, desired_capabilities = capabilities) driver.get(&#39;https://ng.investing.com/equities/nigeria&#39;) all_stocks = driver.find_element(By.ID, value = &#39;all&#39;) all_stocks.click() time.sleep(3) page = driver.page_source driver.quit() . Next step is the same as the earlier process of extracting all the relevant text from the &lt;tbody&gt; of the table using extract_text function. . page_html = HTML(html = page) . all_stocks_table = page_html.find(&#39;#cross_rate_markets_stocks_1&#39;, first = True) . all_stock_rows = all_stocks_table.find(&#39;tbody tr&#39;) . all_stock_rows[:5] . [&lt;Element &#39;tr&#39; id=&#39;pair_101641&#39;&gt;, &lt;Element &#39;tr&#39; id=&#39;pair_101643&#39;&gt;, &lt;Element &#39;tr&#39; id=&#39;pair_101644&#39;&gt;, &lt;Element &#39;tr&#39; id=&#39;pair_101645&#39;&gt;, &lt;Element &#39;tr&#39; id=&#39;pair_101646&#39;&gt;] . nse_all_stocks = list(map(extract_text, all_stock_rows)) nse_all_stocks = pd.DataFrame(data = nse_all_stocks, columns = column_names) . nse_all_stocks.set_index(&#39;Name&#39;, inplace = True) nse_all_stocks.head() . Last High Low Chg. Chg. % Vol. Time . Name . Berger Paints 7.75 | 7.75 | 7.75 | +0.00 | +0.00% | 0 | 1651234680 | . Avoncrown 1.180 | 1.180 | 1.180 | 0.000 | 0.00% | 0 | 1580802308 | . Betaglas 61.70 | 61.70 | 61.70 | +0.00 | +0.00% | 0 | 1651239000 | . Aiico 0.79 | 0.79 | 0.75 | +0.00 | +0.00% | 0 | 1651239000 | . Asosavings 0.50 | 0.50 | 0.50 | 0.00 | 0.00% | 0 | 1580802308 | . &lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; height=&quot;24px&quot;viewBox=&quot;0 0 24 24&quot; width=&quot;24px&quot;&gt; &lt;/svg&gt; nse_all_stocks[&#39;Time&#39;] = nse_all_stocks[&#39;Time&#39;].apply(lambda x: int(x)) nse_all_stocks[&#39;Time&#39;] = nse_all_stocks[&#39;Time&#39;].apply(lambda x: pd.to_datetime(datetime.fromtimestamp(x).date())) . nse_all_stocks.head() . Last High Low Chg. Chg. % Vol. Time . Name . Berger Paints 7.75 | 7.75 | 7.75 | +0.00 | +0.00% | 0 | 2022-04-29 | . Avoncrown 1.180 | 1.180 | 1.180 | 0.000 | 0.00% | 0 | 2020-02-04 | . Betaglas 61.70 | 61.70 | 61.70 | +0.00 | +0.00% | 0 | 2022-04-29 | . Aiico 0.79 | 0.79 | 0.75 | +0.00 | +0.00% | 0 | 2022-04-29 | . Asosavings 0.50 | 0.50 | 0.50 | 0.00 | 0.00% | 0 | 2020-02-04 | . &lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; height=&quot;24px&quot;viewBox=&quot;0 0 24 24&quot; width=&quot;24px&quot;&gt; &lt;/svg&gt; nse_all_stocks.shape . (161, 7) . GETTING DATA FROM XHR OBJECT . So far we&#39;ve successfully scraped data from a web page table. But sometimes the data we require are not easily accessible within the HTML elements. The daily equity price of all listed companies are displayed in a tabular format but the historical price of each stock is displayed as an area graph. . On the left side of the image above is an area chart of MTN Nigeria historical share price. Beside it, at the Network tab, are requests made by the website. The chart in particular is rendered by the data fetched from XMLHttpRequest (XHR) object --highlighted. XHR are API within the Javascript browser environment whose methods are used to fetch data from the server. They are common in website implementing Ajax design. To have access to the data behind the chart, we need to intercept the request made by the browser. Selenium wire give you access to the underlying requests made by the browser. . def extract_link(row): domain = &#39;https://ng.investing.com&#39; path = row.find(&#39;td&#39;)[1].find(&#39;a&#39;, first = True).attrs[&#39;href&#39;] url = domain + path + &#39;-chart&#39; name = row.find(&#39;td&#39;)[1].find(&#39;a&#39;, first = True).attrs[&#39;title&#39;] return [name, url] . The function above construct the link to the chart for each company in a row. The key components required are domain and the path which is gotten from the href attribute of the anchor tag. To arrive at the full path these two components are concatenated with -chart which is a suffix common to the chart page. This function is then used to extract all the names and chart link of all companies on the table. . chart_links = [extract_link(row) for row in all_stock_rows] . chart_link_df = pd.DataFrame(data = chart_links, columns = [&#39;Name&#39;, &#39;Link&#39;]) . chart_link_df.head() . Name Link . 0 Berger Paints | https://ng.investing.com/equities/berger-paint... | . 1 Avoncrown | https://ng.investing.com/equities/avoncrown-chart | . 2 Betaglas | https://ng.investing.com/equities/betaglas-chart | . 3 Aiico | https://ng.investing.com/equities/aiico-chart | . 4 Asosavings | https://ng.investing.com/equities/asosavings-c... | . &lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; height=&quot;24px&quot;viewBox=&quot;0 0 24 24&quot; width=&quot;24px&quot;&gt; &lt;/svg&gt; Let&#39;s demonstrate how to intercept a browser request using one of the links in the table above. Basically, the link is passed to the driver which loads the web page. By calling the driver.request attribute, all request made by the browser can be saved as a variable. Subsequently, the request (XHR object) of interest is filtered by specifying a unique substring of its url &#39;/history?symbol=&#39; in our own case. . driver = webdriver.Chrome(&#39;chromedriver&#39;, options = options, desired_capabilities = capabilities) driver.get(chart_link_df.iloc[0, 1]) reqs = driver.requests # xhr = driver.wait_for_request(r&#39;/history?symbol=&#39;, 60) driver.quit() . req = [req for req in reqs if &#39;/history?symbol=&#39; in req.url] . header = req[0].headers url = req[0].url . print(header) . sec-ch-ua: accept: */* content-type: text/plain sec-ch-ua-mobile: ?0 user-agent: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) HeadlessChrome/100.0.4896.127 Safari/537.36 sec-ch-ua-platform: origin: https://tvc-invdn-com.investing.com sec-fetch-site: same-site sec-fetch-mode: cors sec-fetch-dest: empty referer: https://tvc-invdn-com.investing.com/ accept-encoding: gzip, deflate, br accept-language: en-US . . res = requests.get(url, headers = header) . ticker = pd.DataFrame(data = res.json()) ticker.head() . t c o h l v vo s . 0 1620604800 | 6.1 | 6.1 | 6.7 | 6.7 | 2448 | 0 | ok | . 1 1620691200 | 6.1 | 6.1 | 6.7 | 6.7 | 3232 | 0 | ok | . 2 1620950400 | 6.1 | 6.1 | 6.7 | 6.7 | 1428 | 0 | ok | . 3 1621209600 | 6.1 | 6.1 | 6.7 | 6.7 | 1292 | 0 | ok | . 4 1621296000 | 6.1 | 6.1 | 6.7 | 6.7 | 3853 | 0 | ok | . &lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; height=&quot;24px&quot;viewBox=&quot;0 0 24 24&quot; width=&quot;24px&quot;&gt; &lt;/svg&gt; #we are only interested in the date and closing price of the stock pd.set_option(&#39;display.max_rows&#39;, None) ticker = ticker.loc[:, [&#39;t&#39;, &#39;c&#39;]] ticker[&#39;t&#39;] = ticker[&#39;t&#39;].apply(lambda x: pd.to_datetime(datetime.fromtimestamp(x).date())) ticker.columns = [&#39;Date&#39;, &#39;Closing Price&#39;] ticker.set_index(&#39;Date&#39;, inplace = True) ticker . Closing Price . Date . 2021-05-10 6.10 | . 2021-05-11 6.10 | . 2021-05-14 6.10 | . 2021-05-17 6.10 | . 2021-05-18 6.10 | . 2021-05-19 6.10 | . 2021-05-20 6.10 | . 2021-05-21 6.10 | . 2021-05-24 6.10 | . 2021-05-26 6.10 | . 2021-05-27 6.10 | . 2021-05-28 6.10 | . 2021-05-31 6.10 | . 2021-06-01 6.10 | . 2021-06-02 6.10 | . 2021-06-03 6.70 | . 2021-06-04 6.70 | . 2021-06-07 6.70 | . 2021-06-08 6.70 | . 2021-06-09 6.70 | . 2021-06-10 6.70 | . 2021-06-11 6.70 | . 2021-06-15 7.15 | . 2021-06-16 7.15 | . 2021-06-17 7.70 | . 2021-06-18 7.70 | . 2021-06-21 7.70 | . 2021-06-22 7.70 | . 2021-06-23 7.70 | . 2021-06-24 7.70 | . 2021-06-25 7.70 | . 2021-06-28 7.70 | . 2021-06-29 7.70 | . 2021-06-30 8.40 | . 2021-07-01 8.40 | . 2021-07-02 9.20 | . 2021-07-05 9.20 | . 2021-07-06 9.85 | . 2021-07-07 8.90 | . 2021-07-08 8.90 | . 2021-07-09 8.90 | . 2021-07-12 8.90 | . 2021-07-13 8.90 | . 2021-07-14 8.90 | . 2021-07-15 8.90 | . 2021-07-16 8.90 | . 2021-07-19 8.90 | . 2021-07-22 8.90 | . 2021-07-23 8.90 | . 2021-07-26 8.90 | . 2021-07-27 8.90 | . 2021-07-28 8.90 | . 2021-07-29 8.90 | . 2021-07-30 8.90 | . 2021-08-02 8.90 | . 2021-08-03 8.90 | . 2021-08-04 8.90 | . 2021-08-05 8.90 | . 2021-08-06 8.90 | . 2021-08-09 8.90 | . 2021-08-10 8.90 | . 2021-08-11 8.90 | . 2021-08-12 8.90 | . 2021-08-13 8.90 | . 2021-08-16 8.90 | . 2021-08-17 8.90 | . 2021-08-18 8.90 | . 2021-08-19 8.90 | . 2021-08-20 8.90 | . 2021-08-23 8.90 | . 2021-08-24 8.90 | . 2021-08-25 8.90 | . 2021-08-26 8.90 | . 2021-08-27 8.90 | . 2021-08-30 8.90 | . 2021-08-31 8.90 | . 2021-09-01 8.90 | . 2021-09-02 8.90 | . 2021-09-03 8.90 | . 2021-09-06 8.90 | . 2021-09-07 8.90 | . 2021-09-08 8.90 | . 2021-09-09 8.90 | . 2021-09-10 8.90 | . 2021-09-13 8.90 | . 2021-09-14 8.90 | . 2021-09-15 8.90 | . 2021-09-16 8.90 | . 2021-09-17 8.90 | . 2021-09-20 8.90 | . 2021-09-21 8.90 | . 2021-09-22 8.90 | . 2021-09-23 8.90 | . 2021-09-24 8.90 | . 2021-09-27 8.90 | . 2021-09-28 8.90 | . 2021-09-29 8.90 | . 2021-09-30 8.90 | . 2021-10-04 8.90 | . 2021-10-05 8.90 | . 2021-10-06 8.90 | . 2021-10-07 8.90 | . 2021-10-08 8.90 | . 2021-10-11 8.90 | . 2021-10-12 8.90 | . 2021-10-13 8.90 | . 2021-10-14 8.90 | . 2021-10-15 8.90 | . 2021-10-18 8.90 | . 2021-10-20 8.90 | . 2021-10-21 8.90 | . 2021-10-22 8.90 | . 2021-10-25 8.90 | . 2021-10-26 8.90 | . 2021-10-27 8.90 | . 2021-10-28 8.90 | . 2021-10-29 9.35 | . 2021-11-01 9.35 | . 2021-11-02 9.35 | . 2021-11-03 9.35 | . 2021-11-04 9.35 | . 2021-11-05 9.45 | . 2021-11-08 9.45 | . 2021-11-09 8.55 | . 2021-11-10 8.55 | . 2021-11-11 8.55 | . 2021-11-12 8.55 | . 2021-11-15 8.55 | . 2021-11-16 8.55 | . 2021-11-17 8.55 | . 2021-11-18 8.55 | . 2021-11-19 8.55 | . 2021-11-22 8.55 | . 2021-11-23 8.55 | . 2021-11-24 8.55 | . 2021-11-25 8.55 | . 2021-11-26 8.55 | . 2021-11-29 8.55 | . 2021-11-30 8.55 | . 2021-12-01 8.55 | . 2021-12-02 8.55 | . 2021-12-03 8.55 | . 2021-12-06 8.55 | . 2021-12-07 8.55 | . 2021-12-08 8.55 | . 2021-12-09 8.55 | . 2021-12-10 8.55 | . 2021-12-13 8.55 | . 2021-12-14 8.55 | . 2021-12-15 8.55 | . 2021-12-16 8.55 | . 2021-12-17 8.55 | . 2021-12-20 8.55 | . 2021-12-21 8.55 | . 2021-12-23 8.55 | . 2021-12-24 8.55 | . 2021-12-29 8.55 | . 2021-12-30 8.55 | . 2021-12-31 8.55 | . 2022-01-04 8.55 | . 2022-01-05 8.55 | . 2022-01-06 8.55 | . 2022-01-07 8.55 | . 2022-01-10 8.55 | . 2022-01-11 7.70 | . 2022-01-12 7.70 | . 2022-01-13 7.70 | . 2022-01-14 7.70 | . 2022-01-17 7.70 | . 2022-01-18 8.15 | . 2022-01-19 8.20 | . 2022-01-20 8.20 | . 2022-01-21 8.20 | . 2022-01-24 8.20 | . 2022-01-25 8.20 | . 2022-01-26 8.20 | . 2022-01-27 8.20 | . 2022-01-28 8.20 | . 2022-01-31 8.20 | . 2022-02-01 8.20 | . 2022-02-02 8.35 | . 2022-02-03 8.35 | . 2022-02-04 8.35 | . 2022-02-07 8.35 | . 2022-02-08 8.35 | . 2022-02-09 8.35 | . 2022-02-10 8.35 | . 2022-02-11 8.35 | . 2022-02-14 8.35 | . 2022-02-15 7.55 | . 2022-02-16 7.55 | . 2022-02-17 7.55 | . 2022-02-18 7.55 | . 2022-02-21 7.55 | . 2022-02-22 8.25 | . 2022-02-23 8.25 | . 2022-02-24 8.30 | . 2022-02-25 8.30 | . 2022-02-28 8.30 | . 2022-03-01 8.30 | . 2022-03-02 8.30 | . 2022-03-03 8.30 | . 2022-03-04 8.30 | . 2022-03-07 8.30 | . 2022-03-08 8.30 | . 2022-03-09 8.30 | . 2022-03-10 8.30 | . 2022-03-11 8.30 | . 2022-03-14 8.30 | . 2022-03-15 8.30 | . 2022-03-16 8.30 | . 2022-03-17 8.30 | . 2022-03-18 8.30 | . 2022-03-21 7.50 | . 2022-03-22 7.50 | . 2022-03-23 7.50 | . 2022-03-24 7.50 | . 2022-03-25 7.50 | . 2022-03-28 7.50 | . 2022-03-29 7.50 | . 2022-03-30 7.50 | . 2022-03-31 6.80 | . 2022-04-01 6.15 | . 2022-04-04 6.20 | . 2022-04-05 6.20 | . 2022-04-06 6.20 | . 2022-04-07 6.20 | . 2022-04-08 6.20 | . 2022-04-11 6.20 | . 2022-04-12 6.80 | . 2022-04-13 7.00 | . 2022-04-14 7.25 | . 2022-04-19 7.00 | . 2022-04-20 7.00 | . 2022-04-21 7.70 | . 2022-04-22 7.70 | . 2022-04-25 7.70 | . 2022-04-26 7.70 | . 2022-04-27 7.70 | . 2022-04-28 7.70 | . 2022-04-29 7.70 | . &lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; height=&quot;24px&quot;viewBox=&quot;0 0 24 24&quot; width=&quot;24px&quot;&gt; &lt;/svg&gt; . def get_historical_price(name, link): driver = webdriver.Chrome(&#39;chromedriver&#39;, options = options, desired_capabilities = capabilities) driver.get(link) reqs = driver.requests driver.quit() req = [req for req in reqs if &#39;/history?symbol=&#39; in req.url] header = req[0].headers url = req[0].url res = requests.get(url, headers = header) df = pd.DataFrame(data = res.json()) df = df.loc[:, [&#39;t&#39;, &#39;c&#39;]] df[&#39;t&#39;] = df[&#39;t&#39;].apply(lambda x: pd.to_datetime(datetime.fromtimestamp(x).date())) df.columns = [&#39;Date&#39;, name] df.set_index(&#39;Date&#39;, inplace = True) return df . the_five = pd.DataFrame() for index in range(5): try: name = chart_link_df.iloc[index, 0] link = chart_link_df.iloc[index, 1] df = get_historical_price(name, link) the_five = pd.merge(the_five, df, how = &#39;outer&#39;, left_index = True, right_index = True) time.sleep(3) except ValueError: continue . the_five . Berger Paints Betaglas Aiico . Date . 2021-05-10 6.10 | 54.000000 | 0.548571 | . 2021-05-11 6.10 | 54.000000 | 0.552857 | . 2021-05-14 6.10 | 54.000000 | 0.552857 | . 2021-05-17 6.10 | 54.000000 | 0.552857 | . 2021-05-18 6.10 | 54.000000 | 0.552857 | . 2021-05-19 6.10 | 54.000000 | 0.535714 | . 2021-05-20 6.10 | 54.000000 | 0.552857 | . 2021-05-21 6.10 | 54.000000 | 0.544285 | . 2021-05-24 6.10 | 54.000000 | 0.518571 | . 2021-05-25 NaN | 54.000000 | 0.492857 | . 2021-05-26 6.10 | 54.000000 | 0.492857 | . 2021-05-27 6.10 | 54.000000 | 0.492857 | . 2021-05-28 6.10 | 54.000000 | 0.497142 | . 2021-05-31 6.10 | NaN | 0.514285 | . 2021-06-01 6.10 | 54.000000 | 0.509999 | . 2021-06-02 6.10 | 54.000000 | 0.509999 | . 2021-06-03 6.70 | 54.000000 | 0.509999 | . 2021-06-04 6.70 | 54.000000 | 0.492857 | . 2021-06-07 6.70 | 54.000000 | 0.480000 | . 2021-06-08 6.70 | 54.000000 | 0.480000 | . 2021-06-09 6.70 | 54.000000 | 0.480000 | . 2021-06-10 6.70 | 54.000000 | 0.480000 | . 2021-06-11 6.70 | 52.950001 | 0.475714 | . 2021-06-15 7.15 | 52.950001 | 0.471428 | . 2021-06-16 7.15 | 52.950001 | 0.467142 | . 2021-06-17 7.70 | 52.950001 | 0.480000 | . 2021-06-18 7.70 | 52.950001 | 0.467142 | . 2021-06-21 7.70 | 52.950001 | 0.467142 | . 2021-06-22 7.70 | NaN | 0.471428 | . 2021-06-23 7.70 | 52.950001 | 0.462857 | . 2021-06-24 7.70 | 52.950001 | 0.428571 | . 2021-06-25 7.70 | 52.950001 | 0.450000 | . 2021-06-28 7.70 | 52.950001 | 0.445714 | . 2021-06-29 7.70 | 52.950001 | 0.450000 | . 2021-06-30 8.40 | 52.950001 | 0.445714 | . 2021-07-01 8.40 | NaN | 0.450000 | . 2021-07-02 9.20 | NaN | 0.450000 | . 2021-07-05 9.20 | 52.950001 | 0.445714 | . 2021-07-06 9.85 | 52.950001 | 0.450000 | . 2021-07-07 8.90 | 52.950001 | 0.450000 | . 2021-07-08 8.90 | 52.950001 | 0.450000 | . 2021-07-09 8.90 | 52.950001 | 0.450000 | . 2021-07-12 8.90 | 52.950001 | 0.450000 | . 2021-07-13 8.90 | 52.950001 | 0.450000 | . 2021-07-14 8.90 | 52.950001 | 0.450000 | . 2021-07-15 8.90 | 52.950001 | 0.492857 | . 2021-07-16 8.90 | 52.950001 | 0.492857 | . 2021-07-19 8.90 | 52.950001 | 0.492857 | . 2021-07-22 8.90 | 52.950001 | 0.450000 | . 2021-07-23 8.90 | 52.950001 | 0.454285 | . 2021-07-26 8.90 | 52.950001 | 0.462857 | . 2021-07-27 8.90 | 52.950001 | 0.462857 | . 2021-07-28 8.90 | 52.950001 | 0.458571 | . 2021-07-29 8.90 | NaN | 0.475714 | . 2021-07-30 8.90 | 52.950001 | 0.462857 | . 2021-08-02 8.90 | 52.950001 | 0.445714 | . 2021-08-03 8.90 | 52.950001 | 0.428571 | . 2021-08-04 8.90 | 52.950001 | 0.415714 | . 2021-08-05 8.90 | NaN | 0.407142 | . 2021-08-06 8.90 | 52.950001 | 0.407142 | . 2021-08-09 8.90 | 52.950001 | 0.420000 | . 2021-08-10 8.90 | 52.950001 | 0.420000 | . 2021-08-11 8.90 | 52.950001 | 0.407142 | . 2021-08-12 8.90 | NaN | 0.415714 | . 2021-08-13 8.90 | NaN | 0.407142 | . 2021-08-16 8.90 | 52.950001 | 0.407142 | . 2021-08-17 8.90 | 52.950001 | 0.411428 | . 2021-08-18 8.90 | NaN | 0.407142 | . 2021-08-19 8.90 | 52.950001 | 0.420000 | . 2021-08-20 8.90 | 52.950001 | 0.420000 | . 2021-08-23 8.90 | 52.950001 | 0.420000 | . 2021-08-24 8.90 | 52.950001 | 0.407142 | . 2021-08-25 8.90 | NaN | 0.407142 | . 2021-08-26 8.90 | 52.950001 | 0.441428 | . 2021-08-27 8.90 | 52.950001 | 0.420000 | . 2021-08-30 8.90 | 52.950001 | 0.441428 | . 2021-08-31 8.90 | 52.950001 | 0.424285 | . 2021-09-01 8.90 | 52.950001 | 0.441428 | . 2021-09-02 8.90 | 52.950001 | 0.441428 | . 2021-09-03 8.90 | 52.950001 | 0.441428 | . 2021-09-06 8.90 | 52.950001 | 0.437142 | . 2021-09-07 8.90 | NaN | 0.437142 | . 2021-09-08 8.90 | 52.950001 | 0.437142 | . 2021-09-09 8.90 | 52.950001 | 0.407142 | . 2021-09-10 8.90 | 52.950001 | 0.424285 | . 2021-09-13 8.90 | NaN | 0.424285 | . 2021-09-14 8.90 | 52.950001 | 0.420000 | . 2021-09-15 8.90 | 52.950001 | 0.411428 | . 2021-09-16 8.90 | NaN | 0.407142 | . 2021-09-17 8.90 | 52.950001 | 0.407142 | . 2021-09-20 8.90 | 52.950001 | 0.415714 | . 2021-09-21 8.90 | 52.950001 | 0.415714 | . 2021-09-22 8.90 | 52.950001 | 0.420000 | . 2021-09-23 8.90 | 52.950001 | 0.411428 | . 2021-09-24 8.90 | 52.950001 | 0.411428 | . 2021-09-27 8.90 | 52.950001 | 0.411428 | . 2021-09-28 8.90 | 52.950001 | 0.407142 | . 2021-09-29 8.90 | 52.950001 | 0.407142 | . 2021-09-30 8.90 | 52.950001 | 0.407142 | . 2021-10-04 8.90 | 52.950001 | 0.402857 | . 2021-10-05 8.90 | 52.950001 | 0.407142 | . 2021-10-06 8.90 | 52.950001 | 0.402857 | . 2021-10-07 8.90 | 52.950001 | 0.394285 | . 2021-10-08 8.90 | NaN | 0.407142 | . 2021-10-11 8.90 | 52.950001 | 0.385714 | . 2021-10-12 8.90 | 52.950001 | 0.394285 | . 2021-10-13 8.90 | 52.950001 | 0.398571 | . 2021-10-14 8.90 | 52.950001 | 0.407142 | . 2021-10-15 8.90 | 52.950001 | 0.407142 | . 2021-10-18 8.90 | 52.950001 | 0.385714 | . 2021-10-20 8.90 | 52.950001 | 0.394285 | . 2021-10-21 8.90 | 52.950001 | 0.398571 | . 2021-10-22 8.90 | 52.950001 | 0.402857 | . 2021-10-25 8.90 | 52.950001 | 0.407142 | . 2021-10-26 8.90 | 52.950001 | 0.402857 | . 2021-10-27 8.90 | 52.950001 | 0.441428 | . 2021-10-28 8.90 | 52.950001 | 0.484285 | . 2021-10-29 9.35 | 52.950001 | 0.531428 | . 2021-11-01 9.35 | 52.950001 | 0.578571 | . 2021-11-02 9.35 | 52.950001 | 0.548571 | . 2021-11-03 9.35 | 52.950001 | 0.522857 | . 2021-11-04 9.35 | 52.950001 | 0.548571 | . 2021-11-05 9.45 | 52.950001 | 0.557142 | . 2021-11-08 9.45 | 52.950001 | 0.548571 | . 2021-11-09 8.55 | 52.950001 | 0.557142 | . 2021-11-10 8.55 | 52.950001 | 0.552857 | . 2021-11-11 8.55 | NaN | 0.548571 | . 2021-11-12 8.55 | NaN | 0.544285 | . 2021-11-15 8.55 | 52.950001 | 0.535714 | . 2021-11-16 8.55 | 52.950001 | 0.557142 | . 2021-11-17 8.55 | 52.950001 | 0.557142 | . 2021-11-18 8.55 | 52.950001 | 0.557142 | . 2021-11-19 8.55 | 52.950001 | 0.539999 | . 2021-11-22 8.55 | 52.950001 | 0.535714 | . 2021-11-23 8.55 | 52.950001 | 0.535714 | . 2021-11-24 8.55 | 52.950001 | 0.590000 | . 2021-11-25 8.55 | 52.950001 | 0.640000 | . 2021-11-26 8.55 | 52.950001 | 0.700000 | . 2021-11-29 8.55 | 52.950001 | 0.760000 | . 2021-11-30 8.55 | 52.950001 | 0.830000 | . 2021-12-01 8.55 | 52.950001 | 0.820000 | . 2021-12-02 8.55 | 52.950001 | 0.760000 | . 2021-12-03 8.55 | 52.950001 | 0.740000 | . 2021-12-06 8.55 | 52.950001 | 0.700000 | . 2021-12-07 8.55 | 52.950001 | 0.700000 | . 2021-12-08 8.55 | 52.950001 | 0.700000 | . 2021-12-09 8.55 | 52.950001 | 0.700000 | . 2021-12-10 8.55 | 52.950001 | 0.680000 | . 2021-12-13 8.55 | 52.950001 | 0.700000 | . 2021-12-14 8.55 | 52.950001 | 0.700000 | . 2021-12-15 8.55 | NaN | 0.700000 | . 2021-12-16 8.55 | NaN | 0.680000 | . 2021-12-17 8.55 | 52.950001 | 0.680000 | . 2021-12-20 8.55 | 52.950001 | 0.680000 | . 2021-12-21 8.55 | 52.950001 | 0.690000 | . 2021-12-22 NaN | 52.950001 | 0.700000 | . 2021-12-23 8.55 | 52.950001 | 0.700000 | . 2021-12-24 8.55 | 52.950001 | 0.710000 | . 2021-12-29 8.55 | 52.950001 | 0.700000 | . 2021-12-30 8.55 | 52.950001 | 0.690000 | . 2021-12-31 8.55 | 52.950001 | 0.700000 | . 2022-01-04 8.55 | 52.950001 | 0.720000 | . 2022-01-05 8.55 | 52.950001 | 0.780000 | . 2022-01-06 8.55 | 52.950001 | 0.780000 | . 2022-01-07 8.55 | NaN | 0.780000 | . 2022-01-10 8.55 | 52.950001 | 0.840000 | . 2022-01-11 7.70 | 52.950001 | 0.810000 | . 2022-01-12 7.70 | 52.950001 | 0.780000 | . 2022-01-13 7.70 | 52.950001 | 0.800000 | . 2022-01-14 7.70 | 52.950001 | 0.790000 | . 2022-01-17 7.70 | 52.950001 | 0.790000 | . 2022-01-18 8.15 | 52.950001 | 0.800000 | . 2022-01-19 8.20 | 52.950001 | 0.800000 | . 2022-01-20 8.20 | NaN | 0.800000 | . 2022-01-21 8.20 | 52.950001 | 0.820000 | . 2022-01-24 8.20 | 52.950001 | 0.800000 | . 2022-01-25 8.20 | 52.950001 | 0.800000 | . 2022-01-26 8.20 | 52.950001 | 0.800000 | . 2022-01-27 8.20 | 52.950001 | 0.760000 | . 2022-01-28 8.20 | 52.950001 | 0.760000 | . 2022-01-31 8.20 | 52.950001 | 0.750000 | . 2022-02-01 8.20 | 52.950001 | 0.740000 | . 2022-02-02 8.35 | 52.950001 | 0.710000 | . 2022-02-03 8.35 | 52.950001 | 0.700000 | . 2022-02-04 8.35 | 52.950001 | 0.720000 | . 2022-02-07 8.35 | 52.950001 | 0.690000 | . 2022-02-08 8.35 | 52.950001 | 0.730000 | . 2022-02-09 8.35 | 52.950001 | 0.710000 | . 2022-02-10 8.35 | 52.950001 | 0.700000 | . 2022-02-11 8.35 | 52.950001 | 0.700000 | . 2022-02-14 8.35 | 52.950001 | 0.680000 | . 2022-02-15 7.55 | NaN | 0.690000 | . 2022-02-16 7.55 | 52.950001 | 0.690000 | . 2022-02-17 7.55 | 52.950001 | 0.690000 | . 2022-02-18 7.55 | 52.950001 | 0.690000 | . 2022-02-21 7.55 | 52.950001 | 0.690000 | . 2022-02-22 8.25 | 52.950001 | 0.670000 | . 2022-02-23 8.25 | NaN | 0.680000 | . 2022-02-24 8.30 | NaN | 0.690000 | . 2022-02-25 8.30 | 52.950001 | 0.690000 | . 2022-02-28 8.30 | 52.950001 | 0.700000 | . 2022-03-01 8.30 | 52.950001 | 0.690000 | . 2022-03-02 8.30 | 52.950001 | 0.710000 | . 2022-03-03 8.30 | 52.950001 | 0.700000 | . 2022-03-04 8.30 | 52.950001 | 0.700000 | . 2022-03-07 8.30 | 52.950001 | 0.660000 | . 2022-03-08 8.30 | 52.950001 | 0.660000 | . 2022-03-09 8.30 | 52.950001 | 0.700000 | . 2022-03-10 8.30 | 52.950001 | 0.700000 | . 2022-03-11 8.30 | 52.950001 | 0.700000 | . 2022-03-14 8.30 | 52.950001 | 0.680000 | . 2022-03-15 8.30 | 52.950001 | 0.650000 | . 2022-03-16 8.30 | 52.950001 | 0.690000 | . 2022-03-17 8.30 | 52.950001 | 0.690000 | . 2022-03-18 8.30 | NaN | 0.720000 | . 2022-03-21 7.50 | 52.950001 | 0.680000 | . 2022-03-22 7.50 | 52.950001 | 0.660000 | . 2022-03-23 7.50 | 52.950001 | 0.660000 | . 2022-03-24 7.50 | 52.950001 | 0.700000 | . 2022-03-25 7.50 | 52.950001 | 0.700000 | . 2022-03-28 7.50 | 58.200001 | 0.670000 | . 2022-03-29 7.50 | 58.200001 | 0.660000 | . 2022-03-30 7.50 | 58.200001 | 0.660000 | . 2022-03-31 6.80 | 58.200001 | 0.670000 | . 2022-04-01 6.15 | 58.200001 | 0.640000 | . 2022-04-04 6.20 | 58.200001 | 0.660000 | . 2022-04-05 6.20 | 58.200001 | 0.650000 | . 2022-04-06 6.20 | 58.200001 | 0.650000 | . 2022-04-07 6.20 | 58.200001 | 0.650000 | . 2022-04-08 6.20 | 58.200001 | 0.670000 | . 2022-04-11 6.20 | 58.200001 | 0.690000 | . 2022-04-12 6.80 | 58.200001 | 0.660000 | . 2022-04-13 7.00 | 58.200001 | 0.670000 | . 2022-04-14 7.25 | 58.200001 | 0.670000 | . 2022-04-19 7.00 | 58.200001 | 0.690000 | . 2022-04-20 7.00 | 58.200001 | 0.690000 | . 2022-04-21 7.70 | 58.200001 | 0.680000 | . 2022-04-22 7.70 | 58.200001 | 0.680000 | . 2022-04-25 7.70 | 58.200001 | 0.660000 | . 2022-04-26 7.70 | 58.200001 | 0.700000 | . 2022-04-27 7.70 | 58.200001 | 0.700000 | . 2022-04-28 7.70 | 58.200001 | 0.740000 | . 2022-04-29 7.70 | 58.200001 | 0.790000 | . &lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; height=&quot;24px&quot;viewBox=&quot;0 0 24 24&quot; width=&quot;24px&quot;&gt; &lt;/svg&gt; References . https://youtu.be/j7VZsCCnptM . | https://en.wikipedia.org/wiki/XMLHttpRequest#:~:text=XMLHttpRequest%20(XHR)%20is%20an%20API,by%20the%20browser&#39;s%20JavaScript%20environment. . | https://colab.research.google.com/github/restrepo/ComputationalMethods/blob/master/tools/selenium.ipynb . | https://stackoverflow.com/questions/51046454/how-can-we-use-selenium-webdriver-in-colab-research-google-com . | .",
            "url": "https://sarbol.github.io/My-Blog/jupyter/selenium/request-html/web%20scraping/2022/05/02/_04_30_Web_Crawling_Tutorial.html",
            "relUrl": "/jupyter/selenium/request-html/web%20scraping/2022/05/02/_04_30_Web_Crawling_Tutorial.html",
            "date": " • May 2, 2022"
        }
        
    
  
    
        ,"post1": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://sarbol.github.io/My-Blog/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post2": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://sarbol.github.io/My-Blog/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://sarbol.github.io/My-Blog/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://sarbol.github.io/My-Blog/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}